foo <- 10
plot(1:10)
devtools::load_all(".")
demo_chunk("try_dc") %>% hlt_funs()
#' Creates an object of the class \code{demo_code}
#'
#' \code{demo_code} objects are evaluated R code, returned from \code{evaluate::evaluate}, with an attached attribute called \code{print_string} which sets up fancy formatting for knitting.
#'
#' @param .code_string A string containing executable R code OR a valid expression that will be converted to a string via \code{deparse()}
#' @param eval_here A boolean specifying whether the code should be immediately evaluated, in addition to creating the \code{demo_code} object. (Defaults to \code{TRUE})
#'
#' @return A \code{demo_code} object.
#'
#' @seealso \code{\link{highlight}}, \code{\link{demo_chunk}}
#'
#' @examples
#'
#' # When run in console, this will print only the results of mean(1:10)
#' my_dc <- demo_code('mean(1:10)') %>% hlt_funs()
#'
#' # The demo_code object itself has no output
#'
#' my_dc
#'
#' # However, when knitted, the source code is formatted.
#'
#' attr(my_dc, "print_string")
#'
#'
#' # Objects defined in demo_code are created in the environment
#'
#' demo_code('foo <- mean(1:10)')
#'
#' foo + 5
#'
#' @importFrom stringr str_trim str_detect str_replace_all
#' @importFrom purrr map map_lgl quietly
#'
#' @export
demo_code <- function(.code_string, eval = TRUE, shatter = TRUE) {
.code_string <- str_trim(.code_string)
new_demo_code <- quietly(evaluate::evaluate)(.code_string)$result
valid <- map_lgl(new_demo_code, ~ (class(.x) != "source") || str_detect(.x, "[^\\s]+"))
new_demo_code <- new_demo_code[valid]
is_src <- map(new_demo_code, class) == "source"
# Scope and run it
if (eval) {
map(new_demo_code[is_src],
~quietly(scope_and_run)(.x))
}
new_demo_code[is_src] <- new_demo_code[is_src] %>%
unlist() %>%
str_replace_all(fixed("\n"), "<br>")
attributes(new_demo_code) <- NULL
if (!shatter) {
.code_string <- str_replace_all(.code_string, fixed("\n"), "<br>")
new_demo_code <- c(.code_string,
new_demo_code[!is_src])
attr(new_demo_code, "where_sources") <- 1
} else {
attr(new_demo_code, "where_sources") <- which(is_src)
}
attr(new_demo_code, "class") <- "demo_code"
attr(new_demo_code, "origin") <- "direct-string"
attr(new_demo_code, "eval") <- eval
return(new_demo_code)
}
#' S3 method for knitting a \code{demo_code} object
#'
#' @importFrom purrr map
#'
#' @export
knit_print.demo_code <- function(x, ...) {
where_sources <- attr(x, "where_sources")
x[-where_sources] <- purrr::map(x[-where_sources], function(val) knitr:::wrap(val, ...))
x[where_sources] <- purrr::map(x[where_sources], function(val) wrap_source(val, ...))
x <- x %>%
str_c(collapse = " ")
knitr::asis_output(x)
#knitr::knit_print(unclass(x))
}
#' Helper for \code{knit_print.demo_code}
wrap_source <- function(x, ...) {
txt_tocode(x)
}
#' S3 method for printing a \code{demo_code}
#'
#' Prints nothing; \code{demo_code} objects should be seen and not heard.
#'
#' If the \code{demo_code} object was created by inputting a string, we should run that code and print any output.s
#'
#' @export
print.demo_code <- function(x, ...) {
# if code is being supplied as an input object, run things, with objects defined in global environment
if (stringr::str_detect(attr(x, "origin"), "direct") && attr(x, "eval")) {
where_sources <- attr(x, "where_sources")
purrr::map_if(x[-where_sources], print)
}
#print(x)
}
#' For pkgdown
#' @export
replay_html.demo_code <- function(x, ...) ""
demo_chunk("try_dc") %>% hlt_funs()
foo + 5
foo <- 10
plot(1:10)
demo_code('plot(1:10')
demo_code('plot(1:10)')
demo_chunk("try_dc") %>% hlt_funs()
foo + 5
foo <- 10
plot(1:10)
demo_code('plot(1:10)')
rlang::last_error()
#' Creates an object of the class \code{demo_code}
#'
#' \code{demo_code} objects are evaluated R code, returned from \code{evaluate::evaluate}, with an attached attribute called \code{print_string} which sets up fancy formatting for knitting.
#'
#' @param .code_string A string containing executable R code OR a valid expression that will be converted to a string via \code{deparse()}
#' @param eval_here A boolean specifying whether the code should be immediately evaluated, in addition to creating the \code{demo_code} object. (Defaults to \code{TRUE})
#'
#' @return A \code{demo_code} object.
#'
#' @seealso \code{\link{highlight}}, \code{\link{demo_chunk}}
#'
#' @examples
#'
#' # When run in console, this will print only the results of mean(1:10)
#' my_dc <- demo_code('mean(1:10)') %>% hlt_funs()
#'
#' # The demo_code object itself has no output
#'
#' my_dc
#'
#' # However, when knitted, the source code is formatted.
#'
#' attr(my_dc, "print_string")
#'
#'
#' # Objects defined in demo_code are created in the environment
#'
#' demo_code('foo <- mean(1:10)')
#'
#' foo + 5
#'
#' @importFrom stringr str_trim str_detect str_replace_all
#' @importFrom purrr map map_lgl quietly
#'
#' @export
demo_code <- function(.code_string, eval = TRUE, shatter = TRUE) {
.code_string <- str_trim(.code_string)
new_demo_code <- quietly(evaluate::evaluate)(.code_string)$result
valid <- map_lgl(new_demo_code, ~ (class(.x) != "source") || str_detect(.x, "[^\\s]+"))
new_demo_code <- new_demo_code[valid]
is_src <- map(new_demo_code, class) == "source"
# Scope and run it
if (eval) {
map(new_demo_code[is_src],
~quietly(scope_and_run)(.x))
}
new_demo_code[is_src] <- new_demo_code[is_src] %>%
unlist() %>%
str_replace_all(fixed("\n"), "<br>")
attributes(new_demo_code) <- NULL
if (!shatter) {
.code_string <- str_replace_all(.code_string, fixed("\n"), "<br>")
new_demo_code <- c(.code_string,
new_demo_code[!is_src])
attr(new_demo_code, "where_sources") <- 1
} else {
attr(new_demo_code, "where_sources") <- which(is_src)
}
attr(new_demo_code, "class") <- "demo_code"
attr(new_demo_code, "origin") <- "direct-string"
attr(new_demo_code, "eval") <- eval
return(new_demo_code)
}
#' S3 method for knitting a \code{demo_code} object
#'
#' @importFrom purrr map
#'
#' @export
knit_print.demo_code <- function(x, ...) {
where_sources <- attr(x, "where_sources")
x[-where_sources] <- purrr::map(x[-where_sources], function(val) knitr:::wrap(val, ...))
x[where_sources] <- purrr::map(x[where_sources], function(val) wrap_source(val, ...))
x <- x %>%
str_c(collapse = " ")
knitr::asis_output(x)
#knitr::knit_print(unclass(x))
}
#' Helper for \code{knit_print.demo_code}
wrap_source <- function(x, ...) {
txt_tocode(x)
}
#' S3 method for printing a \code{demo_code}
#'
#' Prints nothing; \code{demo_code} objects should be seen and not heard.
#'
#' If the \code{demo_code} object was created by inputting a string, we should run that code and print any output.s
#'
#' @export
print.demo_code <- function(x, ...) {
# if code is being supplied as an input object, run things, with objects defined in global environment
if (stringr::str_detect(attr(x, "origin"), "direct") && attr(x, "eval")) {
where_sources <- attr(x, "where_sources")
purrr::map(x[-where_sources], print)
}
#print(x)
}
#' For pkgdown
#' @export
replay_html.demo_code <- function(x, ...) ""
demo_code('plot(1:10)')
demo_chunk("try_dc") %>% hlt_funs()
foo + 5
bob <- demo_chunk("try_dc") %>% hlt_funs()
attr(bob, "origin")
bob <- demo_chunk("try_dc")
attr(bob, "origin")
str(bob)
attributes(bob)
demo_code('plot(1:10)')
bob <- demo_code('plot(1:10)')
str(bob)
#' Builds a \code{\link{demo_code}} object from a code chunk
#'
#' This function reads the source code from a given code chunk that has the value \code{label} set to the \code{demo} option; i.e., \code{{r, demo = "my_label"}}.
#'
#' When run directly in a source file, \code{demo_chunk()} reads the text of the active file and extracts the relevant string of source code from the labelled chunk.  (Important: this only works in RStudio.)
#'
#' When run during the \code{knitr::knit()} process, \code{demo_chunk()} pulls the relevant chunk source during \code{knitr::knit_hooks$set("source").}
#'
#' @param label String that gives the name of the label used in a chunk option. If left blank, current chunk is used.
#'
#' @return An object of class \code{\link{demo_code}}
#'
#' @importFrom stringr str_c str_trim
#'
#' @export
demo_chunk <- function(label) {
sources = NULL
try_chunk <- purrr::safely(knitr:::knit_code$get)(label)
if (is.null(try_chunk$error) && !is.null(try_chunk$result)) {
sources <- try_chunk$result %>%
str_c(collapse = "\n") %>%
str_trim()
new_demo_code <- demo_code(sources)
print(str(new_demo_code))
attr(new_demo_code, "origin") <- "chunk-knit"
} else if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
editorIsOpen <- tryCatch({
rstudioapi::getSourceEditorContext()
TRUE
}, error = function(e) FALSE)
if (editorIsOpen) {
ed <- rstudioapi::getSourceEditorContext()
sources <- ed$contents
new_demo_code <- demo_code(code_from_editor(sources, label))
attr(new_demo_code, "origin") <- "chunk-active"
}
}
if (is.null(sources)) {
stop(paste0("Error: No chunk found with label '", label, "'"))
}
return(new_demo_code)
}
#' Converts raw editor text to a string of code
#'
#' Raw editor text has been taken from an active RStudio session via \code{rstudioapi::getSourceEditorContext()}.  Chunk delimiters and html is removed, all formatting is otherwise perserved.
#'
#' @importFrom stringr str_c str_which str_trim
code_from_editor <- function(.contents, label) {
# Find the start of the desired demo chunk
chunk_regex <- paste0('\\`\\`\\`\\{r ', label, '(\\}|(,.*\\}))$')
start_chunk <- .contents %>%
str_which(chunk_regex)
if (length(start_chunk) == 0) {
stop(paste0("Error: No chunk found with label '", label, "'"))
} else if (length(start_chunk) > 1) {
stop(paste0("Error: Duplicate chunk label '", label, "'"))
}
end_chunk <- .contents[-c(1:start_chunk)] %>%
str_which(fixed("```")) %>%
min() + start_chunk
chunk_text <- .contents[(start_chunk+1):(end_chunk-1)] %>%
str_c(collapse = "\n") %>%
str_trim()
attributes(chunk_text) <- NULL
return(chunk_text)
}
bob <- demo_chunk("try_dc")
attr(bob, "origin")
foo + 5
#' Builds a \code{\link{demo_code}} object from a code chunk
#'
#' This function reads the source code from a given code chunk that has the value \code{label} set to the \code{demo} option; i.e., \code{{r, demo = "my_label"}}.
#'
#' When run directly in a source file, \code{demo_chunk()} reads the text of the active file and extracts the relevant string of source code from the labelled chunk.  (Important: this only works in RStudio.)
#'
#' When run during the \code{knitr::knit()} process, \code{demo_chunk()} pulls the relevant chunk source during \code{knitr::knit_hooks$set("source").}
#'
#' @param label String that gives the name of the label used in a chunk option. If left blank, current chunk is used.
#'
#' @return An object of class \code{\link{demo_code}}
#'
#' @importFrom stringr str_c str_trim
#'
#' @export
demo_chunk <- function(label) {
sources = NULL
try_chunk <- purrr::safely(knitr:::knit_code$get)(label)
if (is.null(try_chunk$error) && !is.null(try_chunk$result)) {
sources <- try_chunk$result %>%
str_c(collapse = "\n") %>%
str_trim()
new_demo_code <- demo_code(sources)
attr(new_demo_code, "origin") <- "chunk-knit"
} else if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
editorIsOpen <- tryCatch({
rstudioapi::getSourceEditorContext()
TRUE
}, error = function(e) FALSE)
if (editorIsOpen) {
ed <- rstudioapi::getSourceEditorContext()
sources <- ed$contents
new_demo_code <- demo_code(code_from_editor(sources, label))
attr(new_demo_code, "origin") <- "chunk-active"
}
}
if (is.null(sources)) {
stop(paste0("Error: No chunk found with label '", label, "'"))
}
return(new_demo_code)
}
#' Converts raw editor text to a string of code
#'
#' Raw editor text has been taken from an active RStudio session via \code{rstudioapi::getSourceEditorContext()}.  Chunk delimiters and html is removed, all formatting is otherwise perserved.
#'
#' @importFrom stringr str_c str_which str_trim
code_from_editor <- function(.contents, label) {
# Find the start of the desired demo chunk
chunk_regex <- paste0('\\`\\`\\`\\{r ', label, '(\\}|(,.*\\}))$')
start_chunk <- .contents %>%
str_which(chunk_regex)
if (length(start_chunk) == 0) {
stop(paste0("Error: No chunk found with label '", label, "'"))
} else if (length(start_chunk) > 1) {
stop(paste0("Error: Duplicate chunk label '", label, "'"))
}
end_chunk <- .contents[-c(1:start_chunk)] %>%
str_which(fixed("```")) %>%
min() + start_chunk
chunk_text <- .contents[(start_chunk+1):(end_chunk-1)] %>%
str_c(collapse = "\n") %>%
str_trim()
attributes(chunk_text) <- NULL
return(chunk_text)
}
demo_chunk("try_dc")
attr(bob, "origin")
foo + 5
demo_chunk("try_dc")
foo + 5
devtools::load_all(".")
library(demoR)
#' Creates an object of the class \code{demo_code}
#'
#' \code{demo_code} objects are evaluated R code, returned from \code{evaluate::evaluate}, with an attached attribute called \code{print_string} which sets up fancy formatting for knitting.
#'
#' @param .code_string A string containing executable R code OR a valid expression that will be converted to a string via \code{deparse()}
#' @param eval_here A boolean specifying whether the code should be immediately evaluated, in addition to creating the \code{demo_code} object. (Defaults to \code{TRUE})
#'
#' @return A \code{demo_code} object.
#'
#' @seealso \code{\link{highlight}}, \code{\link{demo_chunk}}
#'
#' @examples
#'
#' # When run in console, this will print only the results of mean(1:10)
#' my_dc <- demo_code('mean(1:10)') %>% hlt_funs()
#'
#' # The demo_code object itself has no output
#'
#' my_dc
#'
#' # However, when knitted, the source code is formatted.
#'
#' attr(my_dc, "print_string")
#'
#'
#' # Objects defined in demo_code are created in the environment
#'
#' demo_code('foo <- mean(1:10)')
#'
#' foo + 5
#'
#' @importFrom stringr str_trim str_detect str_replace_all
#' @importFrom purrr map map_lgl quietly
#'
#' @export
demo_code <- function(.code_string, eval = TRUE, shatter = TRUE) {
.code_string <- str_trim(.code_string)
new_demo_code <- quietly(evaluate::evaluate)(.code_string)$result
valid <- map_lgl(new_demo_code, ~ (class(.x) != "source") || str_detect(.x, "[^\\s]+"))
new_demo_code <- new_demo_code[valid]
is_src <- map(new_demo_code, class) == "source"
# Scope and run it
if (eval) {
map(new_demo_code[is_src],
~quietly(scope_and_run)(.x))
}
new_demo_code[is_src] <- new_demo_code[is_src] %>%
unlist() %>%
str_replace_all(fixed("\n"), "<br>")
attributes(new_demo_code) <- NULL
if (!shatter) {
.code_string <- str_replace_all(.code_string, fixed("\n"), "<br>")
new_demo_code <- c(.code_string,
new_demo_code[!is_src])
attr(new_demo_code, "where_sources") <- 1
} else {
attr(new_demo_code, "where_sources") <- which(is_src)
}
attr(new_demo_code, "class") <- "demo_code"
attr(new_demo_code, "origin") <- "direct-string"
attr(new_demo_code, "eval") <- eval
return(new_demo_code)
}
#' S3 method for knitting a \code{demo_code} object
#'
#' @importFrom purrr map
#'
#' @export
knit_print.demo_code <- function(x, ...) {
where_sources <- attr(x, "where_sources")
x[-where_sources] <- purrr::map(x[-where_sources], function(val) knitr:::wrap(val, ...))
x[where_sources] <- purrr::map(x[where_sources], function(val) wrap_source(val, ...))
x <- x %>%
str_c(collapse = " ")
knitr::asis_output(x)
#knitr::knit_print(unclass(x))
}
#' Helper for \code{knit_print.demo_code}
wrap_source <- function(x, ...) {
txt_tocode(x)
}
#' S3 method for printing a \code{demo_code}
#'
#' Prints nothing; \code{demo_code} objects should be seen and not heard.
#'
#' If the \code{demo_code} object was created by inputting a string, we should run that code and print any output.s
#'
#' @export
print.demo_code <- function(x, ...) {
# if code is being supplied as an input object, run things, with objects defined in global environment
if (attr(x, "eval")) {
where_sources <- attr(x, "where_sources")
purrr::map(x[-where_sources], print)
}
#print(x)
}
#' For pkgdown
#' @export
replay_html.demo_code <- function(x, ...) ""
bob <- demo_code('plot(1:10)')
foo <- 10
plot(1:10)
demo_chunk("try_dc")
devtools::load_all(".")
foo <- 10
plot(1:10)
demo_chunk("try_dc")
foo + 5
bob <- demo_code('plot(1:10)')
bob <- demo_code('plot(1:10)')
demo_code('plot(1:10)')
library(demoR)
emo::ji("sad")
devtools::load_all(".")
library(demoR)
devtools::load_all(".")
install.packages("testthat")
devtools::load_all(".")
library(demoR)
devtools::load_all(".")
library(demoR)
hlt_all
demoR::hlt_all
library(demoR)
vignette("demoR")
devtools::build()
devtools::build()
vignette("demoR")
devtools::load_all(".")
vignette("demoR")
library(demoR)
vignette("demoR")
browseVignettes("demoR")
devtools::build_vignettes()
library(demoR)
vignette("demoR")
pkgdown::build_site()
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
devtools::load_all(".")
pkgdown::build_site()
library(demoR)
pkgdown::build_site()
update.packages("pkgdown")
